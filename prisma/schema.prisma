// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MODELO EXAMPLE

model Orchestra {
  id                    String         @id @default(cuid()) // Podria declararse como tipo string @default(cuid()) ??? 
  name                  String         @unique @db.VarChar()
  description           String
  logo                  String
  cover                 String
  creation_date         String
  sponsor               String?
  location              String
  is_active             Boolean        @default(true)
  donation_account      String         @unique
  phone                 String         @unique
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  user_id               String?
  posts                 Post[]
  orchestra_type        Orchestra_Type @relation(fields: [orchestra_TypeId], references: [id])
  orchestra_TypeId      String
  Campaign              Campaign[]
  Favorites             Favorites[]
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  avatar        String?
  cover         String?
  year_of_birth String
  city          String?
  is_active     Boolean   @default(true)
  first_time    Boolean   @default(true)
  comments      Comment[]
  posts         Post[]
  Rol           Rol?      @relation(fields: [rolId], references: [id])
  rolId         String?
  Post_Reaction   Post_Reaction? @relation(fields: [post_ReactionId], references: [id])
  post_ReactionId String?
  Favorites       Favorites[]
}

model Rol {
  id    String @id @default(cuid())
  name  String
  users User[]
}

model Post {
  id            String          @id @default(cuid())
  title         String
  content       String          @db.Text
  url_video     String?
  url_file      String?
  visibility    String?
  is_active     Boolean         @default(true)
  creation_date DateTime        @default(now())
  event_date    String
  event_hour    String
  views         Int?
  comments      Comment[]
  Orchestra     Orchestra?      @relation(fields: [orchestraId], references: [id])
  orchestraId   String?
  User          User?           @relation(fields: [userId], references: [id])
  userId        String?
  Type_Post     Type_Post?      @relation(fields: [type_PostId], references: [id])
  type_PostId   String?
  Post_Reaction Post_Reaction[]
}

model Orchestra_Type {
  id        String      @id @default(cuid())
  type      String
  Orchestra Orchestra[]
}

model Campaign {
  id            String    @id @default(cuid())
  title         String
  goal_amount   Float
  start_date    String
  end_date      String
  description   String    @db.Text
  is_active     Boolean   @default(true)
  amount_raised Float
  orchestra     Orchestra @relation(fields: [orchestraId], references: [id])
  orchestraId   String
}

model Comment {
  id            String   @id @default(cuid())
  content       String
  creation_date DateTime @default(now())
  is_active     Boolean  @default(true)
  User          User?    @relation(fields: [userId], references: [id])
  userId        String?
  Post          Post?    @relation(fields: [postId], references: [id])
  postId        String?
}

model Type_Post {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]
}

model Post_Reaction {
  id         String    @id @default(cuid())
  Reaction   Reaction? @relation(fields: [reactionId], references: [id])
  reactionId String?
  post       Post      @relation(fields: [postId], references: [id])
  postId     String
  users      User[]
}

model Reaction {
  id             String          @id @default(cuid())
  reaction       String
  post_reactions Post_Reaction[]
}

model Favorites {
  favorites_id String      @id @default(cuid())
  orchestra_id Orchestra[]
  user_id      User?       @relation(fields: [userId], references: [id])
  userId       String?
}
