// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model orchestras {
  id                 String               @id @default(cuid())
  name               String               @unique @db.VarChar()
  description        String
  logo               String?
  cover              String?
  creation_date      String
  sponsor            String?
  location           String
  is_active          Boolean?             @default(true)
  donation_account   String               @unique
  phone              String               @unique
  user_id            String?              @db.Uuid()
  posts              posts[]
  orchestra_type     orchestra_type?      @relation(fields: [orchestra_TypeId], references: [id])
  orchestra_TypeId   String?
  campaigns          campaigns[]
  users_on_orchestra users_on_orchestra[]
  favorites          favorites[]
  donations          donations[]
}

model users {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String?
  email                  String                   @unique
  password               String?
  avatar                 String?
  cover                  String?
  birthday               DateTime? @db.Date 
  city                   String?
  state                  String?
  country                String?
  is_active              Boolean                  @default(true)
  first_time             Boolean                  @default(true)
  comments               comments[]
  posts                  posts[]
  post_user_on_reactions post_user_on_reactions[]
  user_on_orchestra      users_on_orchestra[]
  favorites              favorites[]
  rol                    rols?                    @relation(fields: [rolId], references: [id])
  rolId                  String?
  donations              donations[]
}

model rols {
  id                String               @id @default(cuid())
  name              String
  privilege         Roles                @default(USER)
  Users             users[]
  user_on_orchestra users_on_orchestra[]
}

model posts {
  id            String                   @id @default(cuid())
  title         String
  content       String                   @db.Text
  url_video     String?
  url_file      String?
  visibility    String?
  is_active     Boolean?                 @default(true)
  creation_date DateTime                 @default(now())
  event_date    String?
  event_hour    String?
  views         Int?
  comments      comments[]
  Orchestra     orchestras               @relation(fields: [orchestraId], references: [id])
  orchestraId   String
  user          users                    @relation(fields: [userCreator], references: [id])
  userCreator   String                   @db.Uuid()
  Type_Post     type_post?               @relation(fields: [type_PostId], references: [id])
  type_PostId   String?
  user_reaction post_user_on_reactions[]
}

model orchestra_type {
  id        String       @id @default(cuid())
  type      String
  orchestra orchestras[]
}

model campaigns {
  id            String      @id @default(cuid())
  title         String
  goal_amount   Float
  start_date    String
  end_date      String?
  description   String      @db.Text
  is_active     Boolean     @default(true)
  amount_raised Float?
  orchestra     orchestras  @relation(fields: [orchestraId], references: [id])
  orchestraId   String
  donations     donations[]
}

model comments {
  id            String   @id @default(cuid())
  content       String
  creation_date DateTime @default(now())
  is_active     Boolean  @default(true)
  User          users?   @relation(fields: [userId], references: [id])
  userId        String?  @db.Uuid()
  Post          posts?   @relation(fields: [postId], references: [id])
  postId        String?
}

model type_post {
  id    String  @id @default(cuid())
  name  String  @unique
  posts posts[]
}

model reactions {
  id                     String                   @id @default(cuid())
  reaction               String                   @unique
  post_user_on_reactions post_user_on_reactions[]
}

model post_user_on_reactions {
  post       posts     @relation(fields: [postId], references: [id])
  postId     String
  user       users     @relation(fields: [userId], references: [id])
  userId     String    @db.Uuid()
  reaction   reactions @relation(fields: [reactionId], references: [id])
  reactionId String

  @@id([postId, userId, reactionId])
}

model users_on_orchestra {
  status      StatusOrchestraMember @default(PENDING)
  user        users                 @relation(fields: [userId], references: [id])
  userId      String                @db.Uuid()
  orchestra   orchestras            @relation(fields: [orchestraId], references: [id])
  orchestraId String
  rol         rols                  @relation(fields: [rolId], references: [id])
  rolId       String

  @@id([userId, orchestraId, rolId])
}

model favorites {
  user        users      @relation(fields: [userId], references: [id])
  userId      String     @db.Uuid()
  orchestra   orchestras @relation(fields: [orchestraId], references: [id])
  orchestraId String

  @@id([userId, orchestraId])
}

enum StatusOrchestraMember {
  PENDING
  MEMBER
  REJECTED
}

enum Roles {
  USER
  MODERATOR
  ADMIN
}

model donations {
  id          String     @id @default(cuid())
  campaign    campaigns? @relation(fields: [campaignId], references: [id])
  campaignId  String?
  orchestra   orchestras @relation(fields: [orchestraId], references: [id])
  orchestraId String
  user        users      @relation(fields: [userId], references: [id])
  userId      String     @db.Uuid()
  amount      Float
  private     Boolean    @default(false)
  date        DateTime   @default(now())
}
